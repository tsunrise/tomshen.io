initSidebarItems({"derive":[["CanonicalDeserialize",""],["CanonicalSerialize",""]],"enum":[["Cow","A clone-on-write smart pointer."],["EdwardsFlags","Flags to be encoded into the serialization. The default flags (empty) should not change the binary representation."],["LegendreSymbol",""],["SWFlags","Flags to be encoded into the serialization. The default flags (empty) should not change the binary representation."],["SerializationError","This is an error that could occur during serialization"]],"fn":[["batch_inversion",""],["buffer_bit_byte_size",""],["buffer_byte_size",""],["characteristic_square_mod_6_is_one",""],["log2","Returns log2"],["prepare_g1","Preprocess a G1 element for use in a pairing."],["prepare_g2","Preprocess a G2 element for use in a pairing."],["test_rng","Should be used only for tests, not for any real world usage."]],"macro":[["field_new",""],["format","Creates a `String` using interpolation of runtime expressions."],["impl_additive_ops_from_ref",""],["impl_multiplicative_ops_from_ref",""],["push_to_vec",""],["to_bytes","Takes as input a sequence of structs, and converts them to a series of bytes. All traits that implement `Bytes` can be automatically converted to bytes in this manner."],["vec","Creates a [`Vec`] containing the arguments."]],"mod":[["alloc","The Rust core allocation and collections library"],["biginteger",""],["bls12_377","This module implements the BLS12_377 curve generated in [BCGMMW20, “Zexe”]. The name denotes that it is a Barreto--Lynn--Scott curve of embedding degree 12, defined over a 377-bit (prime) field. The main feature of this curve is that both the scalar field and the base field are highly 2-adic. (This is in contrast to the BLS12_381 curve for which only the scalar field is highly 2-adic.)"],["bytes",""],["curves",""],["ed_on_bls12_381","This module implements a twisted Edwards curve whose base field is the scalar field of the curve BLS12-377. This allows defining cryptographic primitives that use elliptic curves over the scalar field of the latter curve. This curve was generated by Sean Bowe, and is also known as Jubjub."],["fields",""],["groups",""],["io","no-std io replacement"],["msm",""],["prelude",""],["serialize",""]],"struct":[["BigInteger128",""],["BigInteger256",""],["BigInteger320",""],["BigInteger384",""],["BigInteger64",""],["BigInteger768",""],["BigInteger832",""],["BitIterator",""],["Box","A pointer type for heap allocation."],["CubicExtField",""],["EmptyFlags","Flags to be encoded into the serialization."],["FixedBaseMSM",""],["Fp12ParamsWrapper",""],["Fp256",""],["Fp2ParamsWrapper",""],["Fp320",""],["Fp384",""],["Fp3ParamsWrapper",""],["Fp4ParamsWrapper",""],["Fp6ParamsWrapper",""],["Fp768",""],["Fp832",""],["QuadExtField",""],["String","A UTF-8 encoded, growable string."],["VariableBaseMSM",""],["Vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'."]],"trait":[["AffineCurve","Affine representation of an elliptic curve point guaranteed to be in the correct prime order subgroup."],["BigInteger","This defines a `BigInteger`, a smart wrapper around a sequence of `u64` limbs, least-significant limb first."],["CanonicalDeserialize","Deserializer in little endian format. This trait can be derived if all fields of a struct implement `CanonicalDeserialize` and the `derive` feature is enabled."],["CanonicalDeserializeWithFlags","Deserializer in little endian format allowing flags to be encoded."],["CanonicalSerialize","Serializer in little endian format. This trait can be derived if all fields of a struct implement `CanonicalSerialize` and the `derive` feature is enabled."],["CanonicalSerializeWithFlags","Serializer in little endian format allowing to encode flags."],["ConstantSerializedSize","Helper trait to get serialized size for constant sized structs."],["CubicExtParameters",""],["CycleEngine","A cycle of pairing-friendly elliptic curves."],["Error",""],["FftField","The interface for fields that are able to be used in FFTs."],["FftParameters","A trait that defines parameters for a field that can be used for FFTs."],["Field","The interface for a generic field."],["Flags",""],["Fp12Parameters",""],["Fp256Parameters",""],["Fp2Parameters",""],["Fp320Parameters",""],["Fp384Parameters",""],["Fp3Parameters",""],["Fp4Parameters",""],["Fp6Parameters",""],["Fp768Parameters",""],["Fp832Parameters",""],["FpParameters","A trait that defines parameters for a prime field."],["FromBytes",""],["Group",""],["ModelParameters",""],["MontgomeryModelParameters",""],["One","Defines a multiplicative identity element for `Self`."],["PairingEngine",""],["PrimeField","The interface for a prime field."],["ProjectiveCurve","Projective representation of an elliptic curve point guaranteed to be in the correct prime order subgroup."],["QuadExtParameters",""],["Read",""],["SWModelParameters",""],["SquareRootField","The interface for a field that supports an efficient square-root operation."],["TEModelParameters",""],["ToBytes",""],["ToConstraintField","Types that can be converted to a vector of `F` elements. Useful for specifying how public inputs to a constraint system should be represented inside that constraint system."],["ToOwned","A generalization of `Clone` to borrowed data."],["UniformRand",""],["Write",""],["Zero","Defines an additive identity element for `Self`."]],"type":[["Bls12_377",""],["Fp12",""],["Fp2",""],["Fp3",""],["Fp4",""],["Fp6",""]]});